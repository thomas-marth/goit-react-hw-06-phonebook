{"version":3,"sources":["redux/phonebook/phonebookActionTypes.js","redux/phonebook/phonebookActions.js","redux/phonebook/phonebookReducer.js","redux/store.js","components/ContactForm/ContactForm.js","redux/phonebook/phonebookSelectors.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/PhoneBook/PhoneBook.js","services/localStorage.js","components/PhoneBook/PhoneBookContainer.js","index.js"],"names":["fetchContacts","createAction","Types","addContact","deleteContact","filterContacts","contactsReducer","createReducer","Actions","state","action","payload","filter","id","filterReducer","combineReducers","contacts","store","configureStore","reducer","phoneBookReducer","ContactForm","onFormSubmit","useState","name","setName","number","setNumber","onSubmit","event","preventDefault","htmlFor","type","value","required","onChange","target","getContacts","getFilter","createSelector","toLowerCase","includes","ContactElement","contact","onDeleteContact","onClick","ContactList","map","ContactListItem","connect","dispatch","phonebookActions","Filter","onChangeFilter","PhoneBook","onAddContact","useEffect","contactsLS","JSON","parse","localStorage","getItem","Storage","setItem","stringify","className","formData","contactToAdd","uuidv4","find","alert","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27046dd0.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nexport default {\r\n  FETCH_CONTACTS: \"FETCH_CONTACTS\",\r\n  ADD_CONTACT: \"ADD_CONTACT\",\r\n  DELETE_CONTACT: \"DELETE_CONTACT\",\r\n  FILTER_CONTACTS: \"FILTER_CONTACTS\",\r\n};\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport Types from \"./phonebookActionTypes\";\r\n\r\nexport const fetchContacts = createAction(Types.FETCH_CONTACTS);\r\nexport const addContact = createAction(Types.ADD_CONTACT);\r\nexport const deleteContact = createAction(Types.DELETE_CONTACT);\r\nexport const filterContacts = createAction(Types.FILTER_CONTACTS);\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport * as Actions from \"./phonebookActions\";\r\n\r\nconst contactsReducer = createReducer([], {\r\n  [Actions.fetchContacts]: (state, action) => action.payload,\r\n  [Actions.addContact]: (state, action) => [...state, action.payload],\r\n  [Actions.deleteContact]: (state, action) =>\r\n    state.filter(({ id }) => id !== action.payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [Actions.filterContacts]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport phoneBookReducer from \"./phonebook/phonebookReducer\";\r\n\r\nconst store = configureStore({ reducer: phoneBookReducer });\r\n\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactForm = ({ onFormSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  function reset() {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  }\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    if (!name || !number) {\r\n      return;\r\n    }\r\n\r\n    onFormSubmit({ name, number });\r\n    reset();\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"name\">\r\n        <h2> Name</h2>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          name=\"name\"\r\n          required\r\n          onChange={({ target }) => setName(target.value)}\r\n        />\r\n      </label>\r\n      <label htmlFor=\"number\">\r\n        <h2> Number</h2>\r\n        <input\r\n          name=\"number\"\r\n          required\r\n          value={number}\r\n          onChange={({ target }) => setNumber(target.value)}\r\n        />\r\n      </label>\r\n      <p></p>\r\n      <button type=\"submit\">Add new contact</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  onFormSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { createSelector } from \"reselect\";\r\n\r\nexport const getContacts = (state) => state.contacts;\r\n\r\nexport const getFilter = (state) => state.filter;\r\n\r\nexport const filterContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) =>\r\n    contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactElement = ({ contact, onDeleteContact }) => (\r\n  <>\r\n    <span>\r\n      {contact.name}: {contact.number}\r\n    </span>\r\n    <button onClick={() => onDeleteContact(contact.id)}>Delete</button>\r\n  </>\r\n);\r\n\r\nContactElement.propTypes = {\r\n  contact: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactElement;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ContactListItem from \"../ContactListItem/ContactListItem\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map((contact) => (\r\n        <li key={contact.id}>\r\n          <ContactListItem\r\n            contact={contact}\r\n            onDeleteContact={onDeleteContact}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from \"react-redux\";\r\nimport * as phonebookActions from \"../../redux/phonebook/phonebookActions\";\r\nimport { filterContacts } from \"../../redux/phonebook/phonebookSelectors\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: filterContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(phonebookActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <>\r\n    <p>Find contacts by name:</p>\r\n    <input name=\"filter\" onChange={onChangeFilter} value={value} />\r\n  </>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { connect } from \"react-redux\";\r\nimport * as phonebookActions from \"../../redux/phonebook/phonebookActions\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChangeFilter: (event) =>\r\n    dispatch(phonebookActions.filterContacts(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { useEffect } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport * as Storage from \"../../services/localStorage\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactListContainer\";\r\nimport Filter from \"../Filter/FilterContainer\";\r\nimport \"normalize.css\";\r\n\r\nfunction PhoneBook({ contacts, onAddContact, fetchContacts }) {\r\n  useEffect(() => {\r\n    const contactsLS = Storage.getContactsFromLS();\r\n    if (contactsLS) {\r\n      fetchContacts(contactsLS);\r\n    }\r\n  }, [fetchContacts]);\r\n\r\n  useEffect(() => {\r\n    Storage.saveContactsToLS(contacts);\r\n  }, [contacts]);\r\n\r\n  const handleFormSubmit = (formData) => {\r\n    const contactToAdd = {\r\n      id: uuidv4(),\r\n      name: formData.name,\r\n      number: formData.number,\r\n    };\r\n\r\n    if (contacts.find((contact) => contact.name === contactToAdd.name)) {\r\n      alert(`${contactToAdd.name} is already in contacts!`);\r\n      return;\r\n    }\r\n\r\n    if (contacts.find((contact) => contact.number === contactToAdd.number)) {\r\n      alert(`${contactToAdd.number} is already in contacts!`);\r\n      return;\r\n    }\r\n\r\n    onAddContact(contactToAdd);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm onFormSubmit={handleFormSubmit} />\r\n      {contacts.length > 1 && <Filter />}\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n\r\nPhoneBook.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n  onAddContact: PropTypes.func.isRequired,\r\n  fetchContacts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PhoneBook;\r\n","export function getContactsFromLS() {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(\"contacts\"));\r\n  } catch {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport function saveContactsToLS(contacts) {\r\n  return localStorage.setItem(\"contacts\", JSON.stringify(contacts));\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport * as phonebookActions from \"../../redux/phonebook/phonebookActions\";\r\nimport PhoneBook from \"./PhoneBook\";\r\nimport {\r\n  getContacts,\r\n  getFilter,\r\n} from \"../../redux/phonebook/phonebookSelectors\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n  filter: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchContacts: (contacts) =>\r\n    dispatch(phonebookActions.fetchContacts(contacts)),\r\n\r\n  onAddContact: (contact) => dispatch(phonebookActions.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneBook);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport PhoneBook from \"./components/PhoneBook/PhoneBookContainer\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PhoneBook />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}